/**
 * UNIVERSIDAD DEL VALLE DE GUATEMALA
 * YASMIN VALDEZ
 * DIEGO DE LEON
 */

public class ListaDoblementeEnlazada<E> implements ListaEnlazada <E>{
	protected int count;
	protected NodoDoble<E> head;
	protected NodoDoble<E> tail;
	

	
	public ListaDoblementeEnlazada(){
		head = null;
		tail = null;
		count = 0;
	}
	@Override
	public int size() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public void addFirst(E value) {
		// TODO Auto-generated method stub
		head = new NodoDoble<E>(value);
		if(tail == null){
			tail = head;
			count++;
		}
		
	}

	@Override
	public E removeFirst() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public E removeLast() {
		// TODO Auto-generated method stub
		NodoDoble<E> temp = tail;
		tail = (NodoDoble<E>) tail.getPrevious();
		if (tail == null) {
		head = null;
		} else {
		tail.setNext(null);
		}
		count--;
		return temp.getValor();
		}

	@Override
	public void addLast(E value) {
		// TODO Auto-generated method stub
		tail = new NodoDoble<E>(value);
		if(head == null){
			head = tail;
			count++;
		}
	}

	@Override
	public E getFirst() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public E getLast() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean contains(E value) {
		// TODO Auto-generated method stub
		return false;
	}
	
	public E remove(E value)
	// pre: value is not null. List can be empty
	// post: first element matching value is removed from list
	{
	NodoDoble<E> finger = head;
	while (finger != null && !finger.getValor().equals(value))
	{
	finger = (NodoDoble<E>) finger.getNext();
	}
	if (finger != null)
	{
	// fix next field of element above
	if (finger.getPrevious() != null)
	{
	finger.getPrevious().setNext(finger.getNext());
	} else {
	head = (NodoDoble<E>) finger.getNext();
	}
	// fix previous field of element below
	if (finger.getNext() != null)
	{
	((NodoDoble<E>) finger.getNext()).setPrevious(finger.getPrevious());
	} else {
	tail = (NodoDoble<E>) finger.getPrevious();
	}
	count--; // fewer elements
	return finger.getValor();
	}
	return null;
	}
	public int lastIndexOf(E value)
	// pre: value is not null
	// post: returns the (0-origin) index of value,
	// or -1 if value is not found
	{
	int i = size()-1;
	NodoDoble<E> finger = tail;
	// search for last matching value, result is desired index
	while (finger != null && !finger.getValor().equals(value))
	{
	finger = (NodoDoble<E>) finger.getPrevious();
	i--;
	}
	if (finger == null)
	{ // value not found, return indicator
	return -1;
	} else {
	// value found, return index
	return i;
	}
	}
	
}
